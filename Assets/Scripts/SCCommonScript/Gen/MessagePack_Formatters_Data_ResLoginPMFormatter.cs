// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ResLoginPMFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResLoginPM>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResLoginPM value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.id);
            writer.Write(value.keepSyncProfile);
            formatterResolver.GetFormatterWithVerify<global::Data.Profile>().Serialize(ref writer, value.profile, options);
            writer.Write(value.timeMs);
            writer.Write(value.timezoneOffset);
            writer.Write(value.offlineBonusTime);
            writer.Write(value.totalGameTimeMs);
            writer.Write(value.totalLoginTimes);
            writer.Write(value.diamond);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.payNotifyUri, options);
        }

        public global::Data.ResLoginPM Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);
            var __keepSyncProfile__ = default(bool);
            var __profile__ = default(global::Data.Profile);
            var __timeMs__ = default(int);
            var __timezoneOffset__ = default(int);
            var __offlineBonusTime__ = default(int);
            var __totalGameTimeMs__ = default(int);
            var __totalLoginTimes__ = default(int);
            var __diamond__ = default(int);
            var __payNotifyUri__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __keepSyncProfile__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __profile__ = formatterResolver.GetFormatterWithVerify<global::Data.Profile>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __timeMs__ = reader.ReadInt32();
                        break;
                    case 4:
                        __timezoneOffset__ = reader.ReadInt32();
                        break;
                    case 5:
                        __offlineBonusTime__ = reader.ReadInt32();
                        break;
                    case 6:
                        __totalGameTimeMs__ = reader.ReadInt32();
                        break;
                    case 7:
                        __totalLoginTimes__ = reader.ReadInt32();
                        break;
                    case 8:
                        __diamond__ = reader.ReadInt32();
                        break;
                    case 9:
                        __payNotifyUri__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResLoginPM();
            ____result.id = __id__;
            ____result.keepSyncProfile = __keepSyncProfile__;
            ____result.profile = __profile__;
            ____result.timeMs = __timeMs__;
            ____result.timezoneOffset = __timezoneOffset__;
            ____result.offlineBonusTime = __offlineBonusTime__;
            ____result.totalGameTimeMs = __totalGameTimeMs__;
            ____result.totalLoginTimes = __totalLoginTimes__;
            ____result.diamond = __diamond__;
            ____result.payNotifyUri = __payNotifyUri__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
