// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(109)
            {
                { typeof(global::System.Collections.Generic.Dictionary<int, global::Data.BMPlayerInfo>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>), 1 },
                { typeof(global::System.Collections.Generic.List<global::Data.LobbyBattleInfo>), 2 },
                { typeof(global::System.Collections.Generic.List<global::Data.Loc>), 3 },
                { typeof(global::System.Collections.Generic.List<global::Data.PurchasedItem>), 4 },
                { typeof(global::System.Collections.Generic.List<global::Data.SqlTableAccount>), 5 },
                { typeof(global::System.Collections.Generic.List<global::Data.SqlTablePlayer>), 6 },
                { typeof(global::System.Collections.Generic.List<int>), 7 },
                { typeof(global::Data.btObjectType), 8 },
                { typeof(global::Data.MsgType), 9 },
                { typeof(global::Data._PRS), 10 },
                { typeof(global::Data.BMBattleInfo), 11 },
                { typeof(global::Data.BMMsgAddCharacter), 12 },
                { typeof(global::Data.BMMsgAddPlayer), 13 },
                { typeof(global::Data.BMMsgBattle), 14 },
                { typeof(global::Data.BMMsgCharacterMove), 15 },
                { typeof(global::Data.BMMsgDebugGetCharacterPosition), 16 },
                { typeof(global::Data.BMMsgMove), 17 },
                { typeof(global::Data.BMMsgPlayerLogin), 18 },
                { typeof(global::Data.BMPlayerInfo), 19 },
                { typeof(global::Data.BMResDebugGetCharacterPosition), 20 },
                { typeof(global::Data.btBattle), 21 },
                { typeof(global::Data.btCharacter), 22 },
                { typeof(global::Data.btObject), 23 },
                { typeof(global::Data.IvyPayResult), 24 },
                { typeof(global::Data.LobbyBattleInfo), 25 },
                { typeof(global::Data.Loc), 26 },
                { typeof(global::Data.LtPayResult), 27 },
                { typeof(global::Data.MsgAAAAction), 28 },
                { typeof(global::Data.MsgBMAlive), 29 },
                { typeof(global::Data.MsgBMCreateBattle), 30 },
                { typeof(global::Data.MsgBMPlayerEnter), 31 },
                { typeof(global::Data.MsgBMPlayerExit), 32 },
                { typeof(global::Data.MsgChangeChannel), 33 },
                { typeof(global::Data.MsgChangeCharacter), 34 },
                { typeof(global::Data.MsgChangeName), 35 },
                { typeof(global::Data.MsgChangePortrait), 36 },
                { typeof(global::Data.MsgDBChangeChannel), 37 },
                { typeof(global::Data.MsgDBInsertAccount), 38 },
                { typeof(global::Data.MsgDestroyPlayer), 39 },
                { typeof(global::Data.MsgEnterBattle), 40 },
                { typeof(global::Data.MsgGetVipDailyReward), 41 },
                { typeof(global::Data.MsgInsertPayiOS), 42 },
                { typeof(global::Data.MsgInsertPlayer), 43 },
                { typeof(global::Data.MsgKeepAliveToLoc), 44 },
                { typeof(global::Data.MsgLobbyCreateBattle), 45 },
                { typeof(global::Data.MsgLobbyDestroyBattle), 46 },
                { typeof(global::Data.MsgLobbyPlayerEnterBattle), 47 },
                { typeof(global::Data.MsgLobbyPlayerExitBattle), 48 },
                { typeof(global::Data.MsgLocBroadcast), 49 },
                { typeof(global::Data.MsgLocBroadcastMsgAAAAction), 50 },
                { typeof(global::Data.MsgLocBroadcastMsgPMAction), 51 },
                { typeof(global::Data.MsgLocReportLoc), 52 },
                { typeof(global::Data.MsgLocRequestLoc), 53 },
                { typeof(global::Data.MsgLogChangeChannel), 54 },
                { typeof(global::Data.MsgLoginAAA), 55 },
                { typeof(global::Data.MsgLoginPM), 56 },
                { typeof(global::Data.MsgLogPlayerLogin), 57 },
                { typeof(global::Data.MsgLogPlayerLogout), 58 },
                { typeof(global::Data.MsgNull), 59 },
                { typeof(global::Data.MsgOnClose), 60 },
                { typeof(global::Data.MsgOnConnect), 61 },
                { typeof(global::Data.MsgOnDisconnect), 62 },
                { typeof(global::Data.MsgPay), 63 },
                { typeof(global::Data.MsgPayIvyStart), 64 },
                { typeof(global::Data.MsgPayLtStart), 65 },
                { typeof(global::Data.MsgPlayerSCSave), 66 },
                { typeof(global::Data.MsgPMAction), 67 },
                { typeof(global::Data.MsgPMAlive), 68 },
                { typeof(global::Data.MsgPreparePlayerLogin), 69 },
                { typeof(global::Data.MsgQueryAccountByChannel), 70 },
                { typeof(global::Data.MsgQueryAccountByPlayerId), 71 },
                { typeof(global::Data.MsgQueryAccountForChangeChannel), 72 },
                { typeof(global::Data.MsgQueryAccountUpdatePlayerId), 73 },
                { typeof(global::Data.MsgQueryPlayerById), 74 },
                { typeof(global::Data.MsgReloadScript), 75 },
                { typeof(global::Data.MsgRunScript), 76 },
                { typeof(global::Data.MsgSavePlayer), 77 },
                { typeof(global::Data.MsgSendDestroyPlayer), 78 },
                { typeof(global::Data.MsgSyncProfile), 79 },
                { typeof(global::Data.MsgUploadProfile), 80 },
                { typeof(global::Data.Profile), 81 },
                { typeof(global::Data.PurchasedItem), 82 },
                { typeof(global::Data.ResBMAlive), 83 },
                { typeof(global::Data.ResBMPlayerEnter), 84 },
                { typeof(global::Data.ResChangeChannel), 85 },
                { typeof(global::Data.ResChangeCharacter), 86 },
                { typeof(global::Data.ResChangeName), 87 },
                { typeof(global::Data.ResChangePortrait), 88 },
                { typeof(global::Data.ResDBQueryAccountPlayerId), 89 },
                { typeof(global::Data.ResEnterBattle), 90 },
                { typeof(global::Data.ResGetVipDailyReward), 91 },
                { typeof(global::Data.ResLobbyCreateBattle), 92 },
                { typeof(global::Data.ResLobbyPlayerEnterBattle), 93 },
                { typeof(global::Data.ResLocRequestLoc), 94 },
                { typeof(global::Data.ResLoginAAA), 95 },
                { typeof(global::Data.ResLoginPM), 96 },
                { typeof(global::Data.ResMisc), 97 },
                { typeof(global::Data.ResMysqlError), 98 },
                { typeof(global::Data.ResPay), 99 },
                { typeof(global::Data.ResPayIvyStart), 100 },
                { typeof(global::Data.ResPayLtStart), 101 },
                { typeof(global::Data.ResPMAlive), 102 },
                { typeof(global::Data.ResPreparePlayerLogin), 103 },
                { typeof(global::Data.ResQueryAccount), 104 },
                { typeof(global::Data.ResQueryPlayer), 105 },
                { typeof(global::Data.ResSyncProfile), 106 },
                { typeof(global::Data.SqlTableAccount), 107 },
                { typeof(global::Data.SqlTablePlayer), 108 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::Data.BMPlayerInfo>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::Data.btCharacter>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::Data.LobbyBattleInfo>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::Data.Loc>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::Data.PurchasedItem>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::Data.SqlTableAccount>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<global::Data.SqlTablePlayer>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 8: return new MessagePack.Formatters.Data.btObjectTypeFormatter();
                case 9: return new MessagePack.Formatters.Data.MsgTypeFormatter();
                case 10: return new MessagePack.Formatters.Data._PRSFormatter();
                case 11: return new MessagePack.Formatters.Data.BMBattleInfoFormatter();
                case 12: return new MessagePack.Formatters.Data.BMMsgAddCharacterFormatter();
                case 13: return new MessagePack.Formatters.Data.BMMsgAddPlayerFormatter();
                case 14: return new MessagePack.Formatters.Data.BMMsgBattleFormatter();
                case 15: return new MessagePack.Formatters.Data.BMMsgCharacterMoveFormatter();
                case 16: return new MessagePack.Formatters.Data.BMMsgDebugGetCharacterPositionFormatter();
                case 17: return new MessagePack.Formatters.Data.BMMsgMoveFormatter();
                case 18: return new MessagePack.Formatters.Data.BMMsgPlayerLoginFormatter();
                case 19: return new MessagePack.Formatters.Data.BMPlayerInfoFormatter();
                case 20: return new MessagePack.Formatters.Data.BMResDebugGetCharacterPositionFormatter();
                case 21: return new MessagePack.Formatters.Data.btBattleFormatter();
                case 22: return new MessagePack.Formatters.Data.btCharacterFormatter();
                case 23: return new MessagePack.Formatters.Data.btObjectFormatter();
                case 24: return new MessagePack.Formatters.Data.IvyPayResultFormatter();
                case 25: return new MessagePack.Formatters.Data.LobbyBattleInfoFormatter();
                case 26: return new MessagePack.Formatters.Data.LocFormatter();
                case 27: return new MessagePack.Formatters.Data.LtPayResultFormatter();
                case 28: return new MessagePack.Formatters.Data.MsgAAAActionFormatter();
                case 29: return new MessagePack.Formatters.Data.MsgBMAliveFormatter();
                case 30: return new MessagePack.Formatters.Data.MsgBMCreateBattleFormatter();
                case 31: return new MessagePack.Formatters.Data.MsgBMPlayerEnterFormatter();
                case 32: return new MessagePack.Formatters.Data.MsgBMPlayerExitFormatter();
                case 33: return new MessagePack.Formatters.Data.MsgChangeChannelFormatter();
                case 34: return new MessagePack.Formatters.Data.MsgChangeCharacterFormatter();
                case 35: return new MessagePack.Formatters.Data.MsgChangeNameFormatter();
                case 36: return new MessagePack.Formatters.Data.MsgChangePortraitFormatter();
                case 37: return new MessagePack.Formatters.Data.MsgDBChangeChannelFormatter();
                case 38: return new MessagePack.Formatters.Data.MsgDBInsertAccountFormatter();
                case 39: return new MessagePack.Formatters.Data.MsgDestroyPlayerFormatter();
                case 40: return new MessagePack.Formatters.Data.MsgEnterBattleFormatter();
                case 41: return new MessagePack.Formatters.Data.MsgGetVipDailyRewardFormatter();
                case 42: return new MessagePack.Formatters.Data.MsgInsertPayiOSFormatter();
                case 43: return new MessagePack.Formatters.Data.MsgInsertPlayerFormatter();
                case 44: return new MessagePack.Formatters.Data.MsgKeepAliveToLocFormatter();
                case 45: return new MessagePack.Formatters.Data.MsgLobbyCreateBattleFormatter();
                case 46: return new MessagePack.Formatters.Data.MsgLobbyDestroyBattleFormatter();
                case 47: return new MessagePack.Formatters.Data.MsgLobbyPlayerEnterBattleFormatter();
                case 48: return new MessagePack.Formatters.Data.MsgLobbyPlayerExitBattleFormatter();
                case 49: return new MessagePack.Formatters.Data.MsgLocBroadcastFormatter();
                case 50: return new MessagePack.Formatters.Data.MsgLocBroadcastMsgAAAActionFormatter();
                case 51: return new MessagePack.Formatters.Data.MsgLocBroadcastMsgPMActionFormatter();
                case 52: return new MessagePack.Formatters.Data.MsgLocReportLocFormatter();
                case 53: return new MessagePack.Formatters.Data.MsgLocRequestLocFormatter();
                case 54: return new MessagePack.Formatters.Data.MsgLogChangeChannelFormatter();
                case 55: return new MessagePack.Formatters.Data.MsgLoginAAAFormatter();
                case 56: return new MessagePack.Formatters.Data.MsgLoginPMFormatter();
                case 57: return new MessagePack.Formatters.Data.MsgLogPlayerLoginFormatter();
                case 58: return new MessagePack.Formatters.Data.MsgLogPlayerLogoutFormatter();
                case 59: return new MessagePack.Formatters.Data.MsgNullFormatter();
                case 60: return new MessagePack.Formatters.Data.MsgOnCloseFormatter();
                case 61: return new MessagePack.Formatters.Data.MsgOnConnectFormatter();
                case 62: return new MessagePack.Formatters.Data.MsgOnDisconnectFormatter();
                case 63: return new MessagePack.Formatters.Data.MsgPayFormatter();
                case 64: return new MessagePack.Formatters.Data.MsgPayIvyStartFormatter();
                case 65: return new MessagePack.Formatters.Data.MsgPayLtStartFormatter();
                case 66: return new MessagePack.Formatters.Data.MsgPlayerSCSaveFormatter();
                case 67: return new MessagePack.Formatters.Data.MsgPMActionFormatter();
                case 68: return new MessagePack.Formatters.Data.MsgPMAliveFormatter();
                case 69: return new MessagePack.Formatters.Data.MsgPreparePlayerLoginFormatter();
                case 70: return new MessagePack.Formatters.Data.MsgQueryAccountByChannelFormatter();
                case 71: return new MessagePack.Formatters.Data.MsgQueryAccountByPlayerIdFormatter();
                case 72: return new MessagePack.Formatters.Data.MsgQueryAccountForChangeChannelFormatter();
                case 73: return new MessagePack.Formatters.Data.MsgQueryAccountUpdatePlayerIdFormatter();
                case 74: return new MessagePack.Formatters.Data.MsgQueryPlayerByIdFormatter();
                case 75: return new MessagePack.Formatters.Data.MsgReloadScriptFormatter();
                case 76: return new MessagePack.Formatters.Data.MsgRunScriptFormatter();
                case 77: return new MessagePack.Formatters.Data.MsgSavePlayerFormatter();
                case 78: return new MessagePack.Formatters.Data.MsgSendDestroyPlayerFormatter();
                case 79: return new MessagePack.Formatters.Data.MsgSyncProfileFormatter();
                case 80: return new MessagePack.Formatters.Data.MsgUploadProfileFormatter();
                case 81: return new MessagePack.Formatters.Data.ProfileFormatter();
                case 82: return new MessagePack.Formatters.Data.PurchasedItemFormatter();
                case 83: return new MessagePack.Formatters.Data.ResBMAliveFormatter();
                case 84: return new MessagePack.Formatters.Data.ResBMPlayerEnterFormatter();
                case 85: return new MessagePack.Formatters.Data.ResChangeChannelFormatter();
                case 86: return new MessagePack.Formatters.Data.ResChangeCharacterFormatter();
                case 87: return new MessagePack.Formatters.Data.ResChangeNameFormatter();
                case 88: return new MessagePack.Formatters.Data.ResChangePortraitFormatter();
                case 89: return new MessagePack.Formatters.Data.ResDBQueryAccountPlayerIdFormatter();
                case 90: return new MessagePack.Formatters.Data.ResEnterBattleFormatter();
                case 91: return new MessagePack.Formatters.Data.ResGetVipDailyRewardFormatter();
                case 92: return new MessagePack.Formatters.Data.ResLobbyCreateBattleFormatter();
                case 93: return new MessagePack.Formatters.Data.ResLobbyPlayerEnterBattleFormatter();
                case 94: return new MessagePack.Formatters.Data.ResLocRequestLocFormatter();
                case 95: return new MessagePack.Formatters.Data.ResLoginAAAFormatter();
                case 96: return new MessagePack.Formatters.Data.ResLoginPMFormatter();
                case 97: return new MessagePack.Formatters.Data.ResMiscFormatter();
                case 98: return new MessagePack.Formatters.Data.ResMysqlErrorFormatter();
                case 99: return new MessagePack.Formatters.Data.ResPayFormatter();
                case 100: return new MessagePack.Formatters.Data.ResPayIvyStartFormatter();
                case 101: return new MessagePack.Formatters.Data.ResPayLtStartFormatter();
                case 102: return new MessagePack.Formatters.Data.ResPMAliveFormatter();
                case 103: return new MessagePack.Formatters.Data.ResPreparePlayerLoginFormatter();
                case 104: return new MessagePack.Formatters.Data.ResQueryAccountFormatter();
                case 105: return new MessagePack.Formatters.Data.ResQueryPlayerFormatter();
                case 106: return new MessagePack.Formatters.Data.ResSyncProfileFormatter();
                case 107: return new MessagePack.Formatters.Data.SqlTableAccountFormatter();
                case 108: return new MessagePack.Formatters.Data.SqlTablePlayerFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class btObjectTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.btObjectType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Data.btObjectType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Data.btObjectType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Data.btObjectType)reader.ReadInt32();
        }
    }

    public sealed class MsgTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Data.MsgType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Data.MsgType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Data.MsgType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class _PRSFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data._PRS>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data._PRS value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.playerIds, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.script, options);
        }

        public global::Data._PRS Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerIds__ = default(global::System.Collections.Generic.List<int>);
            var __script__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerIds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __script__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data._PRS();
            ____result.playerIds = __playerIds__;
            ____result.script = __script__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMBattleInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMBattleInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMBattleInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.mapId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>>().Serialize(ref writer, value.characters, options);
            writer.Write(value.battleId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Data.BMPlayerInfo>>().Serialize(ref writer, value.playerDict, options);
        }

        public global::Data.BMBattleInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __battleId__ = default(int);
            var __playerDict__ = default(global::System.Collections.Generic.Dictionary<int, global::Data.BMPlayerInfo>);
            var __mapId__ = default(int);
            var __characters__ = default(global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 2:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __playerDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Data.BMPlayerInfo>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __mapId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __characters__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMBattleInfo();
            ____result.battleId = __battleId__;
            ____result.playerDict = __playerDict__;
            ____result.mapId = __mapId__;
            ____result.characters = __characters__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgAddCharacterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgAddCharacter>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgAddCharacter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Data.btCharacter>().Serialize(ref writer, value.character, options);
        }

        public global::Data.BMMsgAddCharacter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __character__ = default(global::Data.btCharacter);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __character__ = formatterResolver.GetFormatterWithVerify<global::Data.btCharacter>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgAddCharacter();
            ____result.character = __character__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgAddPlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgAddPlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgAddPlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Data.BMPlayerInfo>().Serialize(ref writer, value.player, options);
        }

        public global::Data.BMMsgAddPlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __player__ = default(global::Data.BMPlayerInfo);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __player__ = formatterResolver.GetFormatterWithVerify<global::Data.BMPlayerInfo>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgAddPlayer();
            ____result.player = __player__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Data.BMBattleInfo>().Serialize(ref writer, value.battle, options);
        }

        public global::Data.BMMsgBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __battle__ = default(global::Data.BMBattleInfo);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __battle__ = formatterResolver.GetFormatterWithVerify<global::Data.BMBattleInfo>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgBattle();
            ____result.battle = __battle__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgCharacterMoveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgCharacterMove>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgCharacterMove value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.characterId);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.moveDir, options);
        }

        public global::Data.BMMsgCharacterMove Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __characterId__ = default(int);
            var __moveDir__ = default(global::UnityEngine.Vector3);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __characterId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __moveDir__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgCharacterMove();
            ____result.characterId = __characterId__;
            ____result.moveDir = __moveDir__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgDebugGetCharacterPositionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgDebugGetCharacterPosition>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgDebugGetCharacterPosition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.characterId);
        }

        public global::Data.BMMsgDebugGetCharacterPosition Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __characterId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __characterId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgDebugGetCharacterPosition();
            ____result.characterId = __characterId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgMoveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgMove>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgMove value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.moveDir, options);
            writer.Write(value.id);
        }

        public global::Data.BMMsgMove Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __moveDir__ = default(global::UnityEngine.Vector3);
            var __id__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __moveDir__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __id__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgMove();
            ____result.moveDir = __moveDir__;
            ____result.id = __id__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMMsgPlayerLoginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMMsgPlayerLogin>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMMsgPlayerLogin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.battleId);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.token, options);
        }

        public global::Data.BMMsgPlayerLogin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __battleId__ = default(int);
            var __playerId__ = default(int);
            var __token__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMMsgPlayerLogin();
            ____result.battleId = __battleId__;
            ____result.playerId = __playerId__;
            ____result.token = __token__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMPlayerInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMPlayerInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMPlayerInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.playerId);
            writer.Write(value.battleId);
        }

        public global::Data.BMPlayerInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __battleId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __battleId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMPlayerInfo();
            ____result.playerId = __playerId__;
            ____result.battleId = __battleId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BMResDebugGetCharacterPositionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.BMResDebugGetCharacterPosition>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.BMResDebugGetCharacterPosition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.position, options);
        }

        public global::Data.BMResDebugGetCharacterPosition Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __position__ = default(global::UnityEngine.Vector3);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.BMResDebugGetCharacterPosition();
            ____result.position = __position__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class btBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.btBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.btBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.mapId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>>().Serialize(ref writer, value.characters, options);
        }

        public global::Data.btBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __mapId__ = default(int);
            var __characters__ = default(global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __mapId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __characters__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Data.btCharacter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.btBattle();
            ____result.mapId = __mapId__;
            ____result.characters = __characters__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class btCharacterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.btCharacter>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.btCharacter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::Data.btObjectType>().Serialize(ref writer, value.type, options);
            writer.Write(value.id);
            writer.Write(value.playerId);
            writer.Write(value.walkableId);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.pos, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.moveDir, options);
        }

        public global::Data.btCharacter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __pos__ = default(global::UnityEngine.Vector3);
            var __playerId__ = default(int);
            var __walkableId__ = default(int);
            var __moveDir__ = default(global::UnityEngine.Vector3);
            var __type__ = default(global::Data.btObjectType);
            var __id__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 4:
                        __pos__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __walkableId__ = reader.ReadInt32();
                        break;
                    case 5:
                        __moveDir__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::Data.btObjectType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __id__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.btCharacter();
            ____result.pos = __pos__;
            ____result.playerId = __playerId__;
            ____result.walkableId = __walkableId__;
            ____result.moveDir = __moveDir__;
            ____result.type = __type__;
            ____result.id = __id__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class btObjectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.btObject>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.btObject value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Data.btObjectType>().Serialize(ref writer, value.type, options);
            writer.Write(value.id);
        }

        public global::Data.btObject Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __type__ = default(global::Data.btObjectType);
            var __id__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::Data.btObjectType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __id__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.btObject();
            ____result.type = __type__;
            ____result.id = __id__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class IvyPayResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.IvyPayResult>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.IvyPayResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.country, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.sku, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.payId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.orderId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.purchaseTime, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.purchaseToken, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.purchaseState, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.uuid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.packageName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.jsonData, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.signature, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.sku_json, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.appid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.payload, options);
        }

        public global::Data.IvyPayResult Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __country__ = default(string);
            var __sku__ = default(string);
            var __payId__ = default(string);
            var __orderId__ = default(string);
            var __purchaseTime__ = default(string);
            var __purchaseToken__ = default(string);
            var __purchaseState__ = default(string);
            var __uuid__ = default(string);
            var __packageName__ = default(string);
            var __jsonData__ = default(string);
            var __signature__ = default(string);
            var __sku_json__ = default(string);
            var __appid__ = default(string);
            var __payload__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __country__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __sku__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __payId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __orderId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __purchaseTime__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __purchaseToken__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __purchaseState__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __uuid__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __packageName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __jsonData__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __signature__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __sku_json__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __appid__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __payload__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.IvyPayResult();
            ____result.country = __country__;
            ____result.sku = __sku__;
            ____result.payId = __payId__;
            ____result.orderId = __orderId__;
            ____result.purchaseTime = __purchaseTime__;
            ____result.purchaseToken = __purchaseToken__;
            ____result.purchaseState = __purchaseState__;
            ____result.uuid = __uuid__;
            ____result.packageName = __packageName__;
            ____result.jsonData = __jsonData__;
            ____result.signature = __signature__;
            ____result.sku_json = __sku_json__;
            ____result.appid = __appid__;
            ____result.payload = __payload__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LobbyBattleInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.LobbyBattleInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.LobbyBattleInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.bmId);
            writer.Write(value.battleId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.playerIds, options);
            writer.Write(value.mapId);
        }

        public global::Data.LobbyBattleInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __bmId__ = default(int);
            var __battleId__ = default(int);
            var __playerIds__ = default(global::System.Collections.Generic.List<int>);
            var __mapId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __bmId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __playerIds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __mapId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.LobbyBattleInfo();
            ____result.bmId = __bmId__;
            ____result.battleId = __battleId__;
            ____result.playerIds = __playerIds__;
            ____result.mapId = __mapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LocFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.Loc>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.Loc value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.inIp, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.outIp, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.outDomain, options);
            writer.Write(value.inPort);
            writer.Write(value.outPort);
        }

        public global::Data.Loc Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);
            var __inIp__ = default(string);
            var __outIp__ = default(string);
            var __outDomain__ = default(string);
            var __inPort__ = default(int);
            var __outPort__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __inIp__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __outIp__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __outDomain__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __inPort__ = reader.ReadInt32();
                        break;
                    case 5:
                        __outPort__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.Loc();
            ____result.id = __id__;
            ____result.inIp = __inIp__;
            ____result.outIp = __outIp__;
            ____result.outDomain = __outDomain__;
            ____result.inPort = __inPort__;
            ____result.outPort = __outPort__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LtPayResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.LtPayResult>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.LtPayResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.amount, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelNo, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.extInfo, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.gameOrderNo, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.thirdNo, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.productId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.status, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.sign, options);
        }

        public global::Data.LtPayResult Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __amount__ = default(string);
            var __channelNo__ = default(string);
            var __extInfo__ = default(string);
            var __gameOrderNo__ = default(string);
            var __thirdNo__ = default(string);
            var __productId__ = default(string);
            var __status__ = default(string);
            var __sign__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __amount__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __channelNo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __extInfo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __gameOrderNo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __thirdNo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __productId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __status__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __sign__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.LtPayResult();
            ____result.amount = __amount__;
            ____result.channelNo = __channelNo__;
            ____result.extInfo = __extInfo__;
            ____result.gameOrderNo = __gameOrderNo__;
            ____result.thirdNo = __thirdNo__;
            ____result.productId = __productId__;
            ____result.status = __status__;
            ____result.sign = __sign__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgAAAActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgAAAAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgAAAAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::Data._PRS>().Serialize(ref writer, value.pmPlayerRunScript, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.active, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.destroyAll, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.destroyPlayerIds, options);
        }

        public global::Data.MsgAAAAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __pmPlayerRunScript__ = default(global::Data._PRS);
            var __active__ = default(string);
            var __destroyAll__ = default(string);
            var __destroyPlayerIds__ = default(global::System.Collections.Generic.List<int>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __pmPlayerRunScript__ = formatterResolver.GetFormatterWithVerify<global::Data._PRS>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __active__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __destroyAll__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __destroyPlayerIds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgAAAAction();
            ____result.pmPlayerRunScript = __pmPlayerRunScript__;
            ____result.active = __active__;
            ____result.destroyAll = __destroyAll__;
            ____result.destroyPlayerIds = __destroyPlayerIds__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgBMAliveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgBMAlive>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgBMAlive value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.bmId);
            formatterResolver.GetFormatterWithVerify<global::Data.Loc>().Serialize(ref writer, value.loc, options);
            writer.Write(value.battleCount);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.LobbyBattleInfo>>().Serialize(ref writer, value.battles, options);
            writer.Write(value.allowNewBattle);
        }

        public global::Data.MsgBMAlive Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __bmId__ = default(int);
            var __loc__ = default(global::Data.Loc);
            var __battleCount__ = default(int);
            var __battles__ = default(global::System.Collections.Generic.List<global::Data.LobbyBattleInfo>);
            var __allowNewBattle__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __bmId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __loc__ = formatterResolver.GetFormatterWithVerify<global::Data.Loc>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __battleCount__ = reader.ReadInt32();
                        break;
                    case 3:
                        __battles__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.LobbyBattleInfo>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __allowNewBattle__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgBMAlive();
            ____result.bmId = __bmId__;
            ____result.loc = __loc__;
            ____result.battleCount = __battleCount__;
            ____result.battles = __battles__;
            ____result.allowNewBattle = __allowNewBattle__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgBMCreateBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgBMCreateBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgBMCreateBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.battleId);
            writer.Write(value.mapId);
        }

        public global::Data.MsgBMCreateBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __battleId__ = default(int);
            var __mapId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __mapId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgBMCreateBattle();
            ____result.battleId = __battleId__;
            ____result.mapId = __mapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgBMPlayerEnterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgBMPlayerEnter>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgBMPlayerEnter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.playerId);
            writer.Write(value.battleId);
        }

        public global::Data.MsgBMPlayerEnter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __battleId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __battleId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgBMPlayerEnter();
            ____result.playerId = __playerId__;
            ____result.battleId = __battleId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgBMPlayerExitFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgBMPlayerExit>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgBMPlayerExit value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.battleId);
            writer.Write(value.playerId);
        }

        public global::Data.MsgBMPlayerExit Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __battleId__ = default(int);
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgBMPlayerExit();
            ____result.battleId = __battleId__;
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgChangeChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgChangeChannel>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgChangeChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel2, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId2, options);
            writer.Write(value.playerId);
        }

        public global::Data.MsgChangeChannel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __channel1__ = default(string);
            var __channelUserId1__ = default(string);
            var __channel2__ = default(string);
            var __channelUserId2__ = default(string);
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __channel1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __channelUserId1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __channel2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __channelUserId2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgChangeChannel();
            ____result.channel1 = __channel1__;
            ____result.channelUserId1 = __channelUserId1__;
            ____result.channel2 = __channel2__;
            ____result.channelUserId2 = __channelUserId2__;
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgChangeCharacterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgChangeCharacter>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgChangeCharacter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.characterConfigId);
        }

        public global::Data.MsgChangeCharacter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __characterConfigId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __characterConfigId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgChangeCharacter();
            ____result.characterConfigId = __characterConfigId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgChangeNameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgChangeName>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgChangeName value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
        }

        public global::Data.MsgChangeName Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgChangeName();
            ____result.name = __name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgChangePortraitFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgChangePortrait>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgChangePortrait value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.portrait, options);
        }

        public global::Data.MsgChangePortrait Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __portrait__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __portrait__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgChangePortrait();
            ____result.portrait = __portrait__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgDBChangeChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgDBChangeChannel>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgDBChangeChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel2, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId2, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userInfo, options);
        }

        public global::Data.MsgDBChangeChannel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __channel1__ = default(string);
            var __channelUserId1__ = default(string);
            var __channel2__ = default(string);
            var __channelUserId2__ = default(string);
            var __userInfo__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __channel1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __channelUserId1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __channel2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __channelUserId2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __userInfo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgDBChangeChannel();
            ____result.channel1 = __channel1__;
            ____result.channelUserId1 = __channelUserId1__;
            ____result.channel2 = __channel2__;
            ____result.channelUserId2 = __channelUserId2__;
            ____result.userInfo = __userInfo__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgDBInsertAccountFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgDBInsertAccount>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgDBInsertAccount value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Data.SqlTableAccount>().Serialize(ref writer, value.accountInfo, options);
        }

        public global::Data.MsgDBInsertAccount Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __accountInfo__ = default(global::Data.SqlTableAccount);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __accountInfo__ = formatterResolver.GetFormatterWithVerify<global::Data.SqlTableAccount>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgDBInsertAccount();
            ____result.accountInfo = __accountInfo__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgDestroyPlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgDestroyPlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgDestroyPlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.place, options);
        }

        public global::Data.MsgDestroyPlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __place__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __place__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgDestroyPlayer();
            ____result.playerId = __playerId__;
            ____result.place = __place__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgEnterBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgEnterBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgEnterBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgEnterBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgEnterBattle();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgGetVipDailyRewardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgGetVipDailyReward>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgGetVipDailyReward value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgGetVipDailyReward Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgGetVipDailyReward();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgInsertPayiOSFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgInsertPayiOS>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgInsertPayiOS value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.env, options);
            writer.Write(value.id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.productId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.bundleId, options);
            writer.Write(value.quantity);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.transactionId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.originalTransactionId, options);
            writer.Write(value.purchaseDateMs);
            writer.Write(value.expiresDateMs);
        }

        public global::Data.MsgInsertPayiOS Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __env__ = default(string);
            var __id__ = default(int);
            var __productId__ = default(string);
            var __bundleId__ = default(string);
            var __quantity__ = default(int);
            var __transactionId__ = default(string);
            var __originalTransactionId__ = default(string);
            var __purchaseDateMs__ = default(int);
            var __expiresDateMs__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __env__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __id__ = reader.ReadInt32();
                        break;
                    case 3:
                        __productId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __bundleId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __quantity__ = reader.ReadInt32();
                        break;
                    case 6:
                        __transactionId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __originalTransactionId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __purchaseDateMs__ = reader.ReadInt32();
                        break;
                    case 9:
                        __expiresDateMs__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgInsertPayiOS();
            ____result.playerId = __playerId__;
            ____result.env = __env__;
            ____result.id = __id__;
            ____result.productId = __productId__;
            ____result.bundleId = __bundleId__;
            ____result.quantity = __quantity__;
            ____result.transactionId = __transactionId__;
            ____result.originalTransactionId = __originalTransactionId__;
            ____result.purchaseDateMs = __purchaseDateMs__;
            ____result.expiresDateMs = __expiresDateMs__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgInsertPlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgInsertPlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgInsertPlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Data.SqlTablePlayer>().Serialize(ref writer, value.player, options);
        }

        public global::Data.MsgInsertPlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __player__ = default(global::Data.SqlTablePlayer);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __player__ = formatterResolver.GetFormatterWithVerify<global::Data.SqlTablePlayer>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgInsertPlayer();
            ____result.player = __player__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgKeepAliveToLocFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgKeepAliveToLoc>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgKeepAliveToLoc value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.isListen);
            writer.Write(value.isServer);
        }

        public global::Data.MsgKeepAliveToLoc Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __isListen__ = default(bool);
            var __isServer__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __isListen__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __isServer__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgKeepAliveToLoc();
            ____result.isListen = __isListen__;
            ____result.isServer = __isServer__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLobbyCreateBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLobbyCreateBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLobbyCreateBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgLobbyCreateBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLobbyCreateBattle();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLobbyDestroyBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLobbyDestroyBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLobbyDestroyBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.bmId);
            writer.Write(value.battleId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.playerIds, options);
        }

        public global::Data.MsgLobbyDestroyBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __bmId__ = default(int);
            var __battleId__ = default(int);
            var __playerIds__ = default(global::System.Collections.Generic.List<int>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __bmId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __playerIds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLobbyDestroyBattle();
            ____result.bmId = __bmId__;
            ____result.battleId = __battleId__;
            ____result.playerIds = __playerIds__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLobbyPlayerEnterBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLobbyPlayerEnterBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLobbyPlayerEnterBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgLobbyPlayerEnterBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLobbyPlayerEnterBattle();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLobbyPlayerExitBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLobbyPlayerExitBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLobbyPlayerExitBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgLobbyPlayerExitBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLobbyPlayerExitBattle();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLocBroadcastFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLocBroadcast>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLocBroadcast value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.ids, options);
            formatterResolver.GetFormatterWithVerify<global::Data.MsgType>().Serialize(ref writer, value.msgType, options);
        }

        public global::Data.MsgLocBroadcast Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ids__ = default(global::System.Collections.Generic.List<int>);
            var __msgType__ = default(global::Data.MsgType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ids__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __msgType__ = formatterResolver.GetFormatterWithVerify<global::Data.MsgType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLocBroadcast();
            ____result.ids = __ids__;
            ____result.msgType = __msgType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLocBroadcastMsgAAAActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLocBroadcastMsgAAAAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLocBroadcastMsgAAAAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.ids, options);
            formatterResolver.GetFormatterWithVerify<global::Data.MsgType>().Serialize(ref writer, value.msgType, options);
            formatterResolver.GetFormatterWithVerify<global::Data.MsgAAAAction>().Serialize(ref writer, value.msg, options);
        }

        public global::Data.MsgLocBroadcastMsgAAAAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __msg__ = default(global::Data.MsgAAAAction);
            var __ids__ = default(global::System.Collections.Generic.List<int>);
            var __msgType__ = default(global::Data.MsgType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 2:
                        __msg__ = formatterResolver.GetFormatterWithVerify<global::Data.MsgAAAAction>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __ids__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __msgType__ = formatterResolver.GetFormatterWithVerify<global::Data.MsgType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLocBroadcastMsgAAAAction();
            ____result.msg = __msg__;
            ____result.ids = __ids__;
            ____result.msgType = __msgType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLocBroadcastMsgPMActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLocBroadcastMsgPMAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLocBroadcastMsgPMAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.ids, options);
            formatterResolver.GetFormatterWithVerify<global::Data.MsgType>().Serialize(ref writer, value.msgType, options);
            formatterResolver.GetFormatterWithVerify<global::Data.MsgPMAction>().Serialize(ref writer, value.msg, options);
        }

        public global::Data.MsgLocBroadcastMsgPMAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __msg__ = default(global::Data.MsgPMAction);
            var __ids__ = default(global::System.Collections.Generic.List<int>);
            var __msgType__ = default(global::Data.MsgType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 2:
                        __msg__ = formatterResolver.GetFormatterWithVerify<global::Data.MsgPMAction>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __ids__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __msgType__ = formatterResolver.GetFormatterWithVerify<global::Data.MsgType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLocBroadcastMsgPMAction();
            ____result.msg = __msg__;
            ____result.ids = __ids__;
            ____result.msgType = __msgType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLocReportLocFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLocReportLoc>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLocReportLoc value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.id);
            formatterResolver.GetFormatterWithVerify<global::Data.Loc>().Serialize(ref writer, value.loc, options);
        }

        public global::Data.MsgLocReportLoc Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);
            var __loc__ = default(global::Data.Loc);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __loc__ = formatterResolver.GetFormatterWithVerify<global::Data.Loc>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLocReportLoc();
            ____result.id = __id__;
            ____result.loc = __loc__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLocRequestLocFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLocRequestLoc>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLocRequestLoc value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.ids, options);
        }

        public global::Data.MsgLocRequestLoc Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ids__ = default(global::System.Collections.Generic.List<int>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ids__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLocRequestLoc();
            ____result.ids = __ids__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLogChangeChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLogChangeChannel>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLogChangeChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId1, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel2, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId2, options);
        }

        public global::Data.MsgLogChangeChannel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __channel1__ = default(string);
            var __channelUserId1__ = default(string);
            var __channel2__ = default(string);
            var __channelUserId2__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __channel1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __channelUserId1__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __channel2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __channelUserId2__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLogChangeChannel();
            ____result.playerId = __playerId__;
            ____result.channel1 = __channel1__;
            ____result.channelUserId1 = __channelUserId1__;
            ____result.channel2 = __channel2__;
            ____result.channelUserId2 = __channelUserId2__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLoginAAAFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLoginAAA>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLoginAAA value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.version, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.platform, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.oaid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.imei, options);
        }

        public global::Data.MsgLoginAAA Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __version__ = default(string);
            var __platform__ = default(string);
            var __channel__ = default(string);
            var __channelUserId__ = default(string);
            var __oaid__ = default(string);
            var __imei__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __version__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __platform__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __channel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __channelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __oaid__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __imei__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLoginAAA();
            ____result.version = __version__;
            ____result.platform = __platform__;
            ____result.channel = __channel__;
            ____result.channelUserId = __channelUserId__;
            ____result.oaid = __oaid__;
            ____result.imei = __imei__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLoginPMFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLoginPM>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLoginPM value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.isReconnect);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.token, options);
            writer.Write(value.timestamp);
        }

        public global::Data.MsgLoginPM Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __isReconnect__ = default(bool);
            var __playerId__ = default(int);
            var __token__ = default(string);
            var __timestamp__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __isReconnect__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __timestamp__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLoginPM();
            ____result.isReconnect = __isReconnect__;
            ____result.playerId = __playerId__;
            ____result.token = __token__;
            ____result.timestamp = __timestamp__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLogPlayerLoginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLogPlayerLogin>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLogPlayerLogin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgLogPlayerLogin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLogPlayerLogin();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgLogPlayerLogoutFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgLogPlayerLogout>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgLogPlayerLogout value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgLogPlayerLogout Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgLogPlayerLogout();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgNullFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgNull>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgNull value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgNull Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgNull();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgOnCloseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgOnClose>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgOnClose value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.isAcceptor);
        }

        public global::Data.MsgOnClose Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __isAcceptor__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __isAcceptor__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgOnClose();
            ____result.isAcceptor = __isAcceptor__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgOnConnectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgOnConnect>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgOnConnect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.isAcceptor);
        }

        public global::Data.MsgOnConnect Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __isAcceptor__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __isAcceptor__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgOnConnect();
            ____result.isAcceptor = __isAcceptor__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgOnDisconnectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgOnDisconnect>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgOnDisconnect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.isAcceptor);
        }

        public global::Data.MsgOnDisconnect Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __isAcceptor__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __isAcceptor__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgOnDisconnect();
            ____result.isAcceptor = __isAcceptor__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPayFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPay>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPay value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.receipt, options);
        }

        public global::Data.MsgPay Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __receipt__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __receipt__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPay();
            ____result.receipt = __receipt__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPayIvyStartFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPayIvyStart>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPayIvyStart value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.id);
        }

        public global::Data.MsgPayIvyStart Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPayIvyStart();
            ____result.id = __id__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPayLtStartFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPayLtStart>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPayLtStart value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.productId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.fen, options);
        }

        public global::Data.MsgPayLtStart Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __productId__ = default(string);
            var __fen__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __productId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __fen__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPayLtStart();
            ____result.productId = __productId__;
            ____result.fen = __fen__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPlayerSCSaveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPlayerSCSave>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPlayerSCSave value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.place, options);
        }

        public global::Data.MsgPlayerSCSave Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __place__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __place__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPlayerSCSave();
            ____result.playerId = __playerId__;
            ____result.place = __place__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPMActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPMAction>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPMAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::Data._PRS>().Serialize(ref writer, value.playerRunScript, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.allowNewPlayer, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.allowClientConnect, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.playerDestroyTimeoutS, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.playerSCSaveIntervalS, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.destroyAll, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.destroyPlayerIds, options);
        }

        public global::Data.MsgPMAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerRunScript__ = default(global::Data._PRS);
            var __allowNewPlayer__ = default(string);
            var __allowClientConnect__ = default(string);
            var __playerDestroyTimeoutS__ = default(string);
            var __playerSCSaveIntervalS__ = default(string);
            var __destroyAll__ = default(string);
            var __destroyPlayerIds__ = default(global::System.Collections.Generic.List<int>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerRunScript__ = formatterResolver.GetFormatterWithVerify<global::Data._PRS>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __allowNewPlayer__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __allowClientConnect__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __playerDestroyTimeoutS__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __playerSCSaveIntervalS__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __destroyAll__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __destroyPlayerIds__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPMAction();
            ____result.playerRunScript = __playerRunScript__;
            ____result.allowNewPlayer = __allowNewPlayer__;
            ____result.allowClientConnect = __allowClientConnect__;
            ____result.playerDestroyTimeoutS = __playerDestroyTimeoutS__;
            ____result.playerSCSaveIntervalS = __playerSCSaveIntervalS__;
            ____result.destroyAll = __destroyAll__;
            ____result.destroyPlayerIds = __destroyPlayerIds__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPMAliveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPMAlive>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPMAlive value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.id);
            writer.Write(value.playerCount);
            formatterResolver.GetFormatterWithVerify<global::Data.Loc>().Serialize(ref writer, value.loc, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.playerList, options);
            writer.Write(value.allowNewPlayer);
        }

        public global::Data.MsgPMAlive Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);
            var __playerCount__ = default(int);
            var __loc__ = default(global::Data.Loc);
            var __playerList__ = default(global::System.Collections.Generic.List<int>);
            var __allowNewPlayer__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __playerCount__ = reader.ReadInt32();
                        break;
                    case 2:
                        __loc__ = formatterResolver.GetFormatterWithVerify<global::Data.Loc>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __playerList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __allowNewPlayer__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPMAlive();
            ____result.id = __id__;
            ____result.playerCount = __playerCount__;
            ____result.loc = __loc__;
            ____result.playerList = __playerList__;
            ____result.allowNewPlayer = __allowNewPlayer__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgPreparePlayerLoginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgPreparePlayerLogin>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgPreparePlayerLogin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.token, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userName, options);
        }

        public global::Data.MsgPreparePlayerLogin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __token__ = default(string);
            var __channel__ = default(string);
            var __channelUserId__ = default(string);
            var __userName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __channel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __channelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __userName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgPreparePlayerLogin();
            ____result.playerId = __playerId__;
            ____result.token = __token__;
            ____result.channel = __channel__;
            ____result.channelUserId = __channelUserId__;
            ____result.userName = __userName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgQueryAccountByChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgQueryAccountByChannel>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgQueryAccountByChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId, options);
        }

        public global::Data.MsgQueryAccountByChannel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __channel__ = default(string);
            var __channelUserId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __channel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __channelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgQueryAccountByChannel();
            ____result.channel = __channel__;
            ____result.channelUserId = __channelUserId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgQueryAccountByPlayerIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgQueryAccountByPlayerId>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgQueryAccountByPlayerId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgQueryAccountByPlayerId Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgQueryAccountByPlayerId();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgQueryAccountForChangeChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgQueryAccountForChangeChannel>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgQueryAccountForChangeChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.notExistChannel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.notExistChannelUserId, options);
        }

        public global::Data.MsgQueryAccountForChangeChannel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __channel__ = default(string);
            var __channelUserId__ = default(string);
            var __notExistChannel__ = default(string);
            var __notExistChannelUserId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __channel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __channelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __notExistChannel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __notExistChannelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgQueryAccountForChangeChannel();
            ____result.channel = __channel__;
            ____result.channelUserId = __channelUserId__;
            ____result.notExistChannel = __notExistChannel__;
            ____result.notExistChannelUserId = __notExistChannelUserId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgQueryAccountUpdatePlayerIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgQueryAccountUpdatePlayerId>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgQueryAccountUpdatePlayerId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgQueryAccountUpdatePlayerId Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgQueryAccountUpdatePlayerId();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgQueryPlayerByIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgQueryPlayerById>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgQueryPlayerById value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgQueryPlayerById Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgQueryPlayerById();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgReloadScriptFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgReloadScript>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgReloadScript value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.dllPath, options);
        }

        public global::Data.MsgReloadScript Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __dllPath__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __dllPath__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgReloadScript();
            ____result.dllPath = __dllPath__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgRunScriptFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgRunScript>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgRunScript value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.script, options);
        }

        public global::Data.MsgRunScript Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __script__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __script__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgRunScript();
            ____result.script = __script__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgSavePlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgSavePlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgSavePlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgSavePlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgSavePlayer();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgSendDestroyPlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgSendDestroyPlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgSendDestroyPlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.MsgSendDestroyPlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgSendDestroyPlayer();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgSyncProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgSyncProfile>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgSyncProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgSyncProfile Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgSyncProfile();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MsgUploadProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.MsgUploadProfile>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.MsgUploadProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.MsgUploadProfile Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.MsgUploadProfile();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.Profile>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.Profile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.level);
            writer.Write(value.money);
            writer.Write(value.diamond);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.portrait, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userName, options);
            writer.Write(value.characterConfigId);
        }

        public global::Data.Profile Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __level__ = default(int);
            var __money__ = default(int);
            var __diamond__ = default(int);
            var __portrait__ = default(string);
            var __userName__ = default(string);
            var __characterConfigId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __level__ = reader.ReadInt32();
                        break;
                    case 1:
                        __money__ = reader.ReadInt32();
                        break;
                    case 2:
                        __diamond__ = reader.ReadInt32();
                        break;
                    case 3:
                        __portrait__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __userName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __characterConfigId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.Profile();
            ____result.level = __level__;
            ____result.money = __money__;
            ____result.diamond = __diamond__;
            ____result.portrait = __portrait__;
            ____result.userName = __userName__;
            ____result.characterConfigId = __characterConfigId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PurchasedItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.PurchasedItem>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.PurchasedItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.duplicated);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.productId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.transactionId, options);
            writer.Write(value.addDiamond);
            writer.Write(value.addGiftVoucher);
        }

        public global::Data.PurchasedItem Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __duplicated__ = default(bool);
            var __productId__ = default(string);
            var __transactionId__ = default(string);
            var __addDiamond__ = default(int);
            var __addGiftVoucher__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __duplicated__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __productId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __transactionId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __addDiamond__ = reader.ReadInt32();
                        break;
                    case 4:
                        __addGiftVoucher__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.PurchasedItem();
            ____result.duplicated = __duplicated__;
            ____result.productId = __productId__;
            ____result.transactionId = __transactionId__;
            ____result.addDiamond = __addDiamond__;
            ____result.addGiftVoucher = __addGiftVoucher__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResBMAliveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResBMAlive>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResBMAlive value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.requireBattleList);
        }

        public global::Data.ResBMAlive Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __requireBattleList__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __requireBattleList__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResBMAlive();
            ____result.requireBattleList = __requireBattleList__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResBMPlayerEnterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResBMPlayerEnter>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResBMPlayerEnter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.token, options);
        }

        public global::Data.ResBMPlayerEnter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __token__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResBMPlayerEnter();
            ____result.token = __token__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResChangeChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResChangeChannel>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResChangeChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.channel2Exist);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userName, options);
            writer.Write(value.loginReward);
        }

        public global::Data.ResChangeChannel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __channel2Exist__ = default(bool);
            var __userName__ = default(string);
            var __loginReward__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __channel2Exist__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __userName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __loginReward__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResChangeChannel();
            ____result.channel2Exist = __channel2Exist__;
            ____result.userName = __userName__;
            ____result.loginReward = __loginReward__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResChangeCharacterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResChangeCharacter>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResChangeCharacter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.characterConfigId);
        }

        public global::Data.ResChangeCharacter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __characterConfigId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __characterConfigId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResChangeCharacter();
            ____result.characterConfigId = __characterConfigId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResChangeNameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResChangeName>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResChangeName value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.ResChangeName Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResChangeName();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResChangePortraitFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResChangePortrait>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResChangePortrait value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.ResChangePortrait Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResChangePortrait();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResDBQueryAccountPlayerIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResDBQueryAccountPlayerId>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResDBQueryAccountPlayerId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.playerId);
        }

        public global::Data.ResDBQueryAccountPlayerId Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResDBQueryAccountPlayerId();
            ____result.playerId = __playerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResEnterBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResEnterBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResEnterBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.alreadyInBattle);
            writer.Write(value.bmId);
            writer.Write(value.battleId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.bmIp, options);
            writer.Write(value.bmPort);
            writer.Write(value.mapId);
        }

        public global::Data.ResEnterBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __alreadyInBattle__ = default(bool);
            var __bmId__ = default(int);
            var __battleId__ = default(int);
            var __bmIp__ = default(string);
            var __bmPort__ = default(int);
            var __mapId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __alreadyInBattle__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __bmId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __bmIp__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __bmPort__ = reader.ReadInt32();
                        break;
                    case 5:
                        __mapId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResEnterBattle();
            ____result.alreadyInBattle = __alreadyInBattle__;
            ____result.bmId = __bmId__;
            ____result.battleId = __battleId__;
            ____result.bmIp = __bmIp__;
            ____result.bmPort = __bmPort__;
            ____result.mapId = __mapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResGetVipDailyRewardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResGetVipDailyReward>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResGetVipDailyReward value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.todayMs);
            writer.Write(value.addDiamond);
        }

        public global::Data.ResGetVipDailyReward Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __todayMs__ = default(int);
            var __addDiamond__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __todayMs__ = reader.ReadInt32();
                        break;
                    case 1:
                        __addDiamond__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResGetVipDailyReward();
            ____result.todayMs = __todayMs__;
            ____result.addDiamond = __addDiamond__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResLobbyCreateBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResLobbyCreateBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResLobbyCreateBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.bmId);
            writer.Write(value.battleId);
        }

        public global::Data.ResLobbyCreateBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __bmId__ = default(int);
            var __battleId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __bmId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __battleId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResLobbyCreateBattle();
            ____result.bmId = __bmId__;
            ____result.battleId = __battleId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResLobbyPlayerEnterBattleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResLobbyPlayerEnterBattle>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResLobbyPlayerEnterBattle value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.alreadyInBattle);
            writer.Write(value.bmId);
            writer.Write(value.battleId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.bmIp, options);
            writer.Write(value.bmPort);
            writer.Write(value.mapId);
        }

        public global::Data.ResLobbyPlayerEnterBattle Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __alreadyInBattle__ = default(bool);
            var __bmId__ = default(int);
            var __battleId__ = default(int);
            var __bmIp__ = default(string);
            var __bmPort__ = default(int);
            var __mapId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __alreadyInBattle__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __bmId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __battleId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __bmIp__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __bmPort__ = reader.ReadInt32();
                        break;
                    case 5:
                        __mapId__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResLobbyPlayerEnterBattle();
            ____result.alreadyInBattle = __alreadyInBattle__;
            ____result.bmId = __bmId__;
            ____result.battleId = __battleId__;
            ____result.bmIp = __bmIp__;
            ____result.bmPort = __bmPort__;
            ____result.mapId = __mapId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResLocRequestLocFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResLocRequestLoc>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResLocRequestLoc value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.Loc>>().Serialize(ref writer, value.locs, options);
        }

        public global::Data.ResLocRequestLoc Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __locs__ = default(global::System.Collections.Generic.List<global::Data.Loc>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __locs__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.Loc>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResLocRequestLoc();
            ____result.locs = __locs__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResLoginAAAFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResLoginAAA>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResLoginAAA value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId, options);
            writer.Write(value.playerId);
            writer.Write(value.pmId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.pmIp, options);
            writer.Write(value.pmPort);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.pmToken, options);
            writer.Write(value.needUploadProfile);
        }

        public global::Data.ResLoginAAA Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __channel__ = default(string);
            var __channelUserId__ = default(string);
            var __playerId__ = default(int);
            var __pmId__ = default(int);
            var __pmIp__ = default(string);
            var __pmPort__ = default(int);
            var __pmToken__ = default(string);
            var __needUploadProfile__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __channel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __channelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 3:
                        __pmId__ = reader.ReadInt32();
                        break;
                    case 4:
                        __pmIp__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __pmPort__ = reader.ReadInt32();
                        break;
                    case 6:
                        __pmToken__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __needUploadProfile__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResLoginAAA();
            ____result.channel = __channel__;
            ____result.channelUserId = __channelUserId__;
            ____result.playerId = __playerId__;
            ____result.pmId = __pmId__;
            ____result.pmIp = __pmIp__;
            ____result.pmPort = __pmPort__;
            ____result.pmToken = __pmToken__;
            ____result.needUploadProfile = __needUploadProfile__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResLoginPMFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResLoginPM>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResLoginPM value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.id);
            writer.Write(value.keepSyncProfile);
            formatterResolver.GetFormatterWithVerify<global::Data.Profile>().Serialize(ref writer, value.profile, options);
            writer.Write(value.timeMs);
            writer.Write(value.timezoneOffset);
            writer.Write(value.offlineBonusTime);
            writer.Write(value.totalGameTimeMs);
            writer.Write(value.totalLoginTimes);
            writer.Write(value.diamond);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.payNotifyUri, options);
        }

        public global::Data.ResLoginPM Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);
            var __keepSyncProfile__ = default(bool);
            var __profile__ = default(global::Data.Profile);
            var __timeMs__ = default(int);
            var __timezoneOffset__ = default(int);
            var __offlineBonusTime__ = default(int);
            var __totalGameTimeMs__ = default(int);
            var __totalLoginTimes__ = default(int);
            var __diamond__ = default(int);
            var __payNotifyUri__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __keepSyncProfile__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __profile__ = formatterResolver.GetFormatterWithVerify<global::Data.Profile>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __timeMs__ = reader.ReadInt32();
                        break;
                    case 4:
                        __timezoneOffset__ = reader.ReadInt32();
                        break;
                    case 5:
                        __offlineBonusTime__ = reader.ReadInt32();
                        break;
                    case 6:
                        __totalGameTimeMs__ = reader.ReadInt32();
                        break;
                    case 7:
                        __totalLoginTimes__ = reader.ReadInt32();
                        break;
                    case 8:
                        __diamond__ = reader.ReadInt32();
                        break;
                    case 9:
                        __payNotifyUri__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResLoginPM();
            ____result.id = __id__;
            ____result.keepSyncProfile = __keepSyncProfile__;
            ____result.profile = __profile__;
            ____result.timeMs = __timeMs__;
            ____result.timezoneOffset = __timezoneOffset__;
            ____result.offlineBonusTime = __offlineBonusTime__;
            ____result.totalGameTimeMs = __totalGameTimeMs__;
            ____result.totalLoginTimes = __totalLoginTimes__;
            ____result.diamond = __diamond__;
            ____result.payNotifyUri = __payNotifyUri__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResMiscFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResMisc>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResMisc value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.oldSocketTimestamp);
        }

        public global::Data.ResMisc Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __oldSocketTimestamp__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __oldSocketTimestamp__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResMisc();
            ____result.oldSocketTimestamp = __oldSocketTimestamp__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResMysqlErrorFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResMysqlError>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResMysqlError value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.code, options);
            writer.Write(value.errno);
        }

        public global::Data.ResMysqlError Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __code__ = default(string);
            var __errno__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __code__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __errno__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResMysqlError();
            ____result.code = __code__;
            ____result.errno = __errno__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResPayFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResPay>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResPay value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.PurchasedItem>>().Serialize(ref writer, value.items, options);
            writer.Write(value.monthlyCardUpdated);
            writer.Write(value.purchaseDateMs);
            writer.Write(value.expiresDateMs);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.numberUpdates, options);
        }

        public global::Data.ResPay Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __items__ = default(global::System.Collections.Generic.List<global::Data.PurchasedItem>);
            var __monthlyCardUpdated__ = default(bool);
            var __purchaseDateMs__ = default(int);
            var __expiresDateMs__ = default(int);
            var __numberUpdates__ = default(global::System.Collections.Generic.List<int>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __items__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.PurchasedItem>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __monthlyCardUpdated__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __purchaseDateMs__ = reader.ReadInt32();
                        break;
                    case 3:
                        __expiresDateMs__ = reader.ReadInt32();
                        break;
                    case 4:
                        __numberUpdates__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResPay();
            ____result.items = __items__;
            ____result.monthlyCardUpdated = __monthlyCardUpdated__;
            ____result.purchaseDateMs = __purchaseDateMs__;
            ____result.expiresDateMs = __expiresDateMs__;
            ____result.numberUpdates = __numberUpdates__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResPayIvyStartFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResPayIvyStart>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResPayIvyStart value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.orderId, options);
        }

        public global::Data.ResPayIvyStart Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __orderId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __orderId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResPayIvyStart();
            ____result.orderId = __orderId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResPayLtStartFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResPayLtStart>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResPayLtStart value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.orderId, options);
        }

        public global::Data.ResPayLtStart Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __orderId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __orderId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResPayLtStart();
            ____result.orderId = __orderId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResPMAliveFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResPMAlive>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResPMAlive value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.requirePlayerList);
        }

        public global::Data.ResPMAlive Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __requirePlayerList__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __requirePlayerList__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResPMAlive();
            ____result.requirePlayerList = __requirePlayerList__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResPreparePlayerLoginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResPreparePlayerLogin>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResPreparePlayerLogin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.needUploadProfile);
        }

        public global::Data.ResPreparePlayerLogin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __needUploadProfile__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __needUploadProfile__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResPreparePlayerLogin();
            ____result.needUploadProfile = __needUploadProfile__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResQueryAccountFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResQueryAccount>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResQueryAccount value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.SqlTableAccount>>().Serialize(ref writer, value.list, options);
        }

        public global::Data.ResQueryAccount Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __list__ = default(global::System.Collections.Generic.List<global::Data.SqlTableAccount>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __list__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.SqlTableAccount>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResQueryAccount();
            ____result.list = __list__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResQueryPlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResQueryPlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResQueryPlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.SqlTablePlayer>>().Serialize(ref writer, value.list, options);
        }

        public global::Data.ResQueryPlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __list__ = default(global::System.Collections.Generic.List<global::Data.SqlTablePlayer>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __list__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.SqlTablePlayer>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResQueryPlayer();
            ____result.list = __list__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResSyncProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ResSyncProfile>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.ResSyncProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Data.ResSyncProfile Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.ResSyncProfile();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SqlTableAccountFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.SqlTableAccount>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.SqlTableAccount value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.playerId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.platform, options);
            writer.Write(value.isBan);
            writer.Write(value.unbanTimeS);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.channelUserId, options);
            writer.Write(value.createTimeS);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.oaid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.imei, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userInfo, options);
        }

        public global::Data.SqlTableAccount Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __playerId__ = default(int);
            var __platform__ = default(string);
            var __isBan__ = default(bool);
            var __unbanTimeS__ = default(int);
            var __channel__ = default(string);
            var __channelUserId__ = default(string);
            var __createTimeS__ = default(int);
            var __oaid__ = default(string);
            var __imei__ = default(string);
            var __userInfo__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __playerId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __platform__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __isBan__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __unbanTimeS__ = reader.ReadInt32();
                        break;
                    case 4:
                        __channel__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __channelUserId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __createTimeS__ = reader.ReadInt32();
                        break;
                    case 7:
                        __oaid__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __imei__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __userInfo__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.SqlTableAccount();
            ____result.playerId = __playerId__;
            ____result.platform = __platform__;
            ____result.isBan = __isBan__;
            ____result.unbanTimeS = __unbanTimeS__;
            ____result.channel = __channel__;
            ____result.channelUserId = __channelUserId__;
            ____result.createTimeS = __createTimeS__;
            ____result.oaid = __oaid__;
            ____result.imei = __imei__;
            ____result.userInfo = __userInfo__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SqlTablePlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.SqlTablePlayer>
    {

        public void Serialize(ref MessagePackWriter writer, global::Data.SqlTablePlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userName, options);
        }

        public global::Data.SqlTablePlayer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(int);
            var __userName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __userName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Data.SqlTablePlayer();
            ____result.id = __id__;
            ____result.userName = __userName__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

